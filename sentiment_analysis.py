# -*- coding: utf-8 -*-
"""sentiment analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jUwdcFipp8AWOAOyLyqweJK-yrWP4ASw
"""

from google.colab import drive
drive.mount('/content/drive')

import chardet
import pandas as pd

# Read the training and test datasets
df_train = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/train.csv", encoding=chardet.detect(open("/content/drive/MyDrive/Colab Notebooks/train.csv", "rb").read())["encoding"])
df_test = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/test.csv", encoding=chardet.detect(open("/content/drive/MyDrive/Colab Notebooks/test.csv", "rb").read())["encoding"])

# Drop rows with missing values in the "text" or "sentiment" columns
df_train = df_train[["text", "sentiment"]].dropna()
df_test = df_test[["text", "sentiment"]].dropna()

# Split the training dataset into training and validation sets
train_text,train_labels=df_train["text"],df_train["sentiment"]

# ...

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import classification_report


# Create a TfidfVectorizer object
vectorizer = TfidfVectorizer()
svm = SVC(kernel="linear")


# Fit the vectorizer on the training data
vectorizer.fit(train_text)

# Transform the training and validation data using the fitted vectorizer
train_features = vectorizer.transform(train_text)

# Train an SVM model
svm.fit(train_features, train_labels)

# Transform the test data using the fitted vectorizer
test_features = vectorizer.transform(df_test["text"])

# Make predictions on the test data
test_predictions = svm.predict(test_features)

# Print the classification report for the test data
print(classification_report(df_test["sentiment"], test_predictions))

!pip install joblib
import joblib
joblib.dump(svm,"sentiment.joblib")

svm_model=joblib.load("sentiment.joblib")

# Predict sentiment on new data
new_text = ["i am not happy"]
new_features = vectorizer.transform(new_text)
new_predictions = svm_model.predict(new_features)
print(new_predictions)

